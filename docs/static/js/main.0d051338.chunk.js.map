{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGcA,EAAe,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAkBlD,OACI,sBAAMC,SAXY,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SAEG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcbM,GAda,4CAAH,sDCCPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,8CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,8BAAKA,EAAL,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAsBvC,OAfAC,qBAAW,WAEPxB,EAASC,GACLwB,MAAM,SAAAC,GAGFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAEEqB,EDnB0BK,CAAc1B,GAAlCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAGrB,OACI,qCACA,6BAAKpB,IAEHoB,GAAW,wCACb,qBAAKJ,UAAU,YAAf,SAGWH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAEGA,GADGA,EAAIC,aEhBpBgB,EAAe,WAAM,IAAD,EAGMzC,mBAAS,CAAC,kBAHhB,mBAGvB0C,EAHuB,KAGX3C,EAHW,KAM9B,OACC,qCAEA,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAEM2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAWA,GADJA,Y,MChBnB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0d051338.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n export const AddCategory  = ( { setCategories } ) => {\r\n\r\n     const [inputValue, setInputValue] = useState('');\r\n\r\n     const handleInputChage = ( e ) =>{\r\n        setInputValue(e.target.value);\r\n     }\r\n\r\n     const handleSubmit = ( e ) =>{\r\n         e.preventDefault();\r\n\r\n         if (inputValue.trim().length > 2) {\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n         }\r\n\r\n        \r\n     }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n           \r\n           <input\r\n                type=\"text\" \r\n                value={ inputValue }\r\n                onChange= { handleInputChage }\r\n              \r\n                />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n","\r\nexport const getGifs = async( category ) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=6uNUHPQA9avVzUQZAZwM7NLSqlj16rp4`;\r\n    const resp = await fetch( url );\r\n    const {data}  = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n   return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url} ) => {\r\n    \r\n    return (\r\n        <div className=\"card card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n\r\n        { loading && <p>Loading</p> }\r\n        <div className=\"card-grid\">\r\n           \r\n                {\r\n                   images.map( ( img ) => (\r\n                       <GifGridItem \r\n                       key= {img.id}\r\n                      {...img }\r\n                       />\r\n\r\n                   ))\r\n\r\n                   \r\n                }\r\n           \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n\r\n        getGifs( category )\r\n           .then( imgs =>{\r\n\r\n        \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                   });\r\n               \r\n           });\r\n\r\n    }, [ category ])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () =>{\r\n\r\n\r\n   const [categories, setCategories] = useState(['Dragon Ball Z']);\r\n\r\n   \r\n   return (\r\n    <>\r\n\r\n    <h2>GifExpertApp</h2>\r\n    <AddCategory setCategories= { setCategories } />\r\n    <hr />\r\n    \r\n    <ol>\r\n       {\r\n          categories.map( category =>(\r\n            <GifGrid\r\n            key = {category}\r\n            category= {category} />\r\n          ))\r\n       }\r\n\r\n    </ol>\r\n    \r\n   </>\r\n   );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}